<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bdharva.com</title>
    <description>Personal website of Ben Harvatine. MIT engineer. Founder &amp; CEO of Jolt. Forbes 30 Under 30 in Healthcare.
</description>
    <link>http://bdharva.com/</link>
    <atom:link href="http://bdharva.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 26 Sep 2016 17:47:27 -0400</pubDate>
    <lastBuildDate>Mon, 26 Sep 2016 17:47:27 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Make some noise( ) in Processing</title>
        <description>&lt;p&gt;While I’m a frequent user of Processing, I mostly use it for generating data visualizations. As a result, I’m generally using a very limited subset of its capabilities. From time to time I like to explore the documentation for cool features that I haven’t had the opportunity to use. Recently, the &lt;code&gt;noise()&lt;/code&gt; function caught my eye.&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&quot;https://processing.org/reference/noise_.html&quot;&gt;Processing documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Perlin noise is a random sequence generator producing a more natural, harmonic succession of numbers than that of the standard random() function. It was developed by Ken Perlin in the 1980s and has been used in graphical applications to generate procedural textures, shapes, terrains, and other seemingly organic forms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This sounded pretty cool to me. As I started imagining what sort of textures I might be able to create, I decided to start with a take on the popular “low poly” wallpapers I’d seen in my travels around the web. To keep things simple (and stay focused on &lt;code&gt;noise()&lt;/code&gt;), I tessalated an array of equilateral triangles for the visual, rather than using random vertices. The traingles were colored using the &lt;code&gt;noise()&lt;/code&gt; value at their center point to scale the &lt;code&gt;g&lt;/code&gt; value in their &lt;code&gt;rgb()&lt;/code&gt; color between 100 and 200, while holding &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; fixed at 50 and 100, respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int width = 1200;
int height = 800;

void setup() {
  
  size(width, height);
  colorMode(RGB, 255);
  poly();

}

void draw() {}

void poly() {

  int size = 25;
  float noiseScale = .01;
  rectMode(CORNER);
  
  for (int x=0; x&amp;lt;width+100; x+=size) {
    
    for (int y=0; y&amp;lt;height+100; y+=2*size*sin(PI/3)) {
    
      for (int t=0; t&amp;lt;12; t+=2) {
        
        float noiseVal = 100+100*noise((x+size/2*cos((t+1)*PI/6))*noiseScale, (y+size/2*sin((t+1)*PI/6))*noiseScale);
        fill(50, noiseVal, 100);
        noStroke();
        triangle(x, y, x+size*cos(t*PI/6), y+size*sin(t*PI/6), x+size*cos((t+2)*PI/6), y+size*sin((t+2)*PI/6));
        
      }
      
    }
    
  }
  
  save(&quot;poly.png&quot;);
  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/assets/blog/perlin/poly.png&quot;&gt;&lt;img src=&quot;/assets/blog/perlin/poly.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next I decided to try breaking the resulting gradient into hard steps. To accomplish this, I scaled &lt;code&gt;noise()&lt;/code&gt; by the number of steps and rounded it to a whole number. Given that it returns a value between zero and one, this yielded scaled values from 0 to &lt;code&gt;steps&lt;/code&gt; that could then be used to incrementally step between defined start and stop &lt;code&gt;rgb()&lt;/code&gt; values.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void poly2() {

  int size = 10;
  float noiseScale = .01;
  int steps = 10;
  int baseR = 150;
  int stopR = 230;
  int baseG = 0;
  int stopG = 230;
  int baseB = 0;
  int stopB = 0;
  
  for (int x=0; x&amp;lt;width+100; x+=size) {
    
    for (int y=0; y&amp;lt;height+100; y+=2*size*sin(PI/3)) {
    
      for (int t=0; t&amp;lt;12; t+=2) {
        
        float noiseVal = steps*noise((x+size/2*cos((t+1)*PI/6))*noiseScale, (y+size/2*sin((t+1)*PI/6))*noiseScale);
        noiseVal = round(noiseVal);
        fill(baseR+noiseVal*(stopR-baseR)/steps, baseG+noiseVal*(stopG-baseG)/steps, baseB+noiseVal*(stopB-baseB)/steps);
        noStroke();
        triangle(x, y, x+size*cos(t*PI/6), y+size*sin(t*PI/6), x+size*cos((t+2)*PI/6), y+size*sin((t+2)*PI/6));
        
      }
      
    }
    
  }
  
  save(&quot;poly2.png&quot;);
  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/assets/blog/perlin/poly2.png&quot;&gt;&lt;img src=&quot;/assets/blog/perlin/poly2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Content with my “low poly wallpaper” and “hot lava” results, it was time to try for a more photorelaistic texture - a cloudy sky. It took some fiddling to get the right look, but I’m pleased with the results. In addition to switching to smaller square regions, you’ll notice I adjusted the scaling factor for &lt;code&gt;noise()&lt;/code&gt;. The &lt;a href=&quot;https://processing.org/reference/noise_.html&quot;&gt;documentation&lt;/a&gt; indicates that “steps of 0.005-0.03 work best for most applications”, and, through all of my trials, I found this to be true. For this particular example, I just tweaked it until I got the “right look”.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void poly3() {

  int size = 5;
  float noiseScale = .005;
  rectMode(CORNER);
  
  for (int x=0; x&amp;lt;width+100; x+=size) {
    
    //for (int y=0; y&amp;lt;height+100; y+=2*size*sin(PI/3)) {
    for (int y=0; y&amp;lt;height+100; y+=size) {
    
      for (int t=0; t&amp;lt;12; t+=2) {
        
        float noiseVal = noise((x+size/2*cos((t+1)*PI/6))*noiseScale, (y+size/2*sin((t+1)*PI/6))*noiseScale);
        
        fill(noiseVal*250, 100+noiseVal*150, 250);
        noStroke();
        rect(x, y, size, -size);
        
      }
      
    }
    
  }
  
  save(&quot;poly3.png&quot;);
  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/assets/blog/perlin/poly3.png&quot;&gt;&lt;img src=&quot;/assets/blog/perlin/poly3.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My final texture experiment was with a digital camo of sorts. Earlier this year I was gifted an Under Armour fishing shirt with a really neat rasterized camo pattern. I figured attempting to recreate it would be more interesting than a traditional square-pixeled digital camo pattern. What I came up with is not a perfect recreation, but it was close enough to make me happy. I’m sure I could get closer with a little more work, but, unfortunately, I don’t have the luxury of being able to play with Processing &lt;em&gt;all&lt;/em&gt; day (yet!).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/blog/perlin/screenshot.png&quot;&gt;&lt;img src=&quot;/assets/blog/perlin/screenshot.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using two base colors, I created a checkerboard pattern to cover the canvas. Then, on top of each square, I created another square of the other color. These squares and their corner radii were scaled with the &lt;code&gt;noise()&lt;/code&gt; value for the first color and inversely scaled for the other to maintain a smooth flow of “dominant color” across cells.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void poly4() {

  int size = 8;
  float noiseScale = .02;
  rectMode(CENTER);
  background(229,255,128);
  
  for (int x=0; x&amp;lt;=width; x+=size) {
    
    for (int y=0; y&amp;lt;=height; y+=size) {
        
      float noiseVal = noise(x/2.5*noiseScale, y*noiseScale);
      noStroke();
      
      float radius;
      
      if (((x/size)+(y/size))%2 == 0) {
        
        radius = noiseVal*size;
        
        fill(83,108,103);
        rect(x, y, size, size);
        fill(229,255,128);
        rect(x, y, noiseVal*size, noiseVal*size, radius, radius, radius, radius);
        
      } else {
        
        radius = (1-noiseVal)*size;
        
        fill(229,255,128);
        rect(x, y, size, size);
        fill(83,108,103);
        rect(x, y, (1-noiseVal)*size, (1-noiseVal)*size, radius, radius, radius, radius);
        
      }
      
    }
    
  }
  
  save(&quot;poly4.png&quot;);
  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/assets/blog/perlin/poly4.png&quot;&gt;&lt;img src=&quot;/assets/blog/perlin/poly4.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there you have it. Thanks to &lt;code&gt;noise()&lt;/code&gt;, just a few simple lines of code can generate a number of interesting textures and patterns. In the future, I may be tempted to refine this camo pattern for a vinyl wrap for my truck.&lt;/p&gt;

&lt;p&gt;You can check out the full source code from these examples on Github.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Sep 2016 00:00:00 -0400</pubDate>
        <link>http://bdharva.com/blog/2016/09/22/processing-perlin-noise.html</link>
        <guid isPermaLink="true">http://bdharva.com/blog/2016/09/22/processing-perlin-noise.html</guid>
        
        <category>Programming</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Red Zone</title>
        <description>&lt;p&gt;&lt;a href=&quot;/assets/blog/redzone/redzone.png&quot;&gt;&lt;img src=&quot;/assets/blog/redzone/redzone.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://bdharva.com/blog/2016/06/10/red-zone.html</link>
        <guid isPermaLink="true">http://bdharva.com/blog/2016/06/10/red-zone.html</guid>
        
        <category>Data Visualization</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Starting Up</title>
        <description>&lt;p&gt;I’ve recently had a number of friends and acquaintances interested in my own experiences as they prepare to make the entrepreneurial leap. In my conversations with them, I found myself often circling back to the same points of emphasis. While there are lots of great resources out there for entrepreneurs, I’ve always found that the personal stories and inisghts of founders add valuable context. In that spirit, I’ve distilled down the most important lessons I learned while starting &lt;a href=&quot;http:joltsensor.com&quot;&gt;Jolt&lt;/a&gt; in the hope that they might be useful to a broader audience.&lt;/p&gt;

&lt;h3 id=&quot;things-we-did-well&quot;&gt;Things We Did Well&lt;/h3&gt;

&lt;h4 id=&quot;prototyping&quot;&gt;Prototyping&lt;/h4&gt;

&lt;p&gt;We focused on cheap and easy ways to quickly build functional prototypes. These prototypes allowed us to quickly test assumptions, validate the concept, and iterate on the core design.&lt;/p&gt;

&lt;h4 id=&quot;early-customer-feedback&quot;&gt;Early Customer Feedback&lt;/h4&gt;

&lt;p&gt;Using the functional prototypes, we were able to get early feedback from customers. This feedback was crucial to better understanding our customers and their requirements while continuing to refine the product.&lt;/p&gt;

&lt;h4 id=&quot;staying-lean--scrappy&quot;&gt;Staying Lean &amp;amp; Scrappy&lt;/h4&gt;

&lt;p&gt;Rather than raising too much money too early or growing the team too quickly, we utilized community resources, grant funding, crowdfunding, and accelerator programs wherever possible. This allowed us to focus our time and attention on building the best possible product for our customers.&lt;/p&gt;

&lt;h4 id=&quot;local-manufacturing&quot;&gt;Local Manufacturing&lt;/h4&gt;

&lt;p&gt;While many startups immediately opt for off-shore manufacturing options, we determined that our best choice was to stay local. We found partners in the Midwest who were easy to work with, willing to get creative to help us keep costs down, and provided the necessary flexibility to scale from small batches to large runs with growing demand.&lt;/p&gt;

&lt;h3 id=&quot;our-biggest-pitfall&quot;&gt;Our Biggest Pitfall&lt;/h3&gt;

&lt;h4 id=&quot;neglecting-sales--marketing&quot;&gt;Neglecting Sales &amp;amp; Marketing&lt;/h4&gt;

&lt;p&gt;While we were laser-focused on product development, we should’ve put more early reources towards sales and marketing strategy. By neglecting this, we weren’t able to immediately hit the ground running once our manufacturing lines were up and running. Although we had early adopters thanks to a Kickstarter campaign and pre-orders, we would’ve had a smoother transition to shipping had we adequately tested and refined our business model sooner. This is a common pitfall for engineering-heavy teams. Even though we were well-aware of this, it was still an easy trap to fall into.&lt;/p&gt;

&lt;h3 id=&quot;useful-resources&quot;&gt;Useful Resources&lt;/h3&gt;

&lt;h4 id=&quot;books-i-wish-id-read-sooner-if-you-only-read-two-read-these&quot;&gt;Books I wish I’d read sooner (if you only read two, read these):&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Crossing-Chasm-3rd-Disruptive-Mainstream/dp/0062292986&quot;&gt;Crossing the Chasm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Traction-Startup-Achieve-Explosive-Customer/dp/1591848369&quot;&gt;Traction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;self-authoring-provisional-patent-applications&quot;&gt;Self-authoring provisional patent applications:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/How-Make-Patent-Drawings-Thousands/dp/1413321569&quot;&gt;How to Make Patent Drawings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Patent-Yourself-Step---Step-Filing/dp/1413320449&quot;&gt;Patent It Yourself&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;other-books-that-have-been-usefulinteresting&quot;&gt;Other books that have been useful/interesting:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Business-Model-Generation-Visionaries-Challengers/dp/0470876417&quot;&gt;Business Model Generation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Disciplined-Entrepreneurship-Steps-Successful-Startup/dp/1118692284&quot;&gt;Disciplined Entrepreneurship&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Rework-Jason-Fried/dp/0307463745&quot;&gt;Rework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Venture-Deals-Smarter-Lawyer-Capitalist/dp/1118443616&quot;&gt;Venture Deals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Founders-Dilemmas-Anticipating-Foundation-Entrepreneurship/dp/0691158304&quot;&gt;The Founder’s Dilemmas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;suggested-books-that-i-havent-gotten-to-yet&quot;&gt;Suggested books that I haven’t gotten to yet:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Hard-Thing-About-Things-Building/dp/0062273205&quot;&gt;The Hard Thing About Hard Things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Lean-Startup-Entrepreneurs-Continuous-Innovation/dp/0307887898&quot;&gt;The Lean Startup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Hooked-How-Build-Habit-Forming-Products/dp/1591847788&quot;&gt;Hooked&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Innovators-Dilemma-Revolutionary-Change-Business/dp/0062060244&quot;&gt;The Innovator’s Dilemma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 01 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://bdharva.com/blog/2016/06/01/starting-up.html</link>
        <guid isPermaLink="true">http://bdharva.com/blog/2016/06/01/starting-up.html</guid>
        
        <category>Entrepreneurship</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>A Week of Podcasts</title>
        <description>&lt;p&gt;As some of my friends may know, I’m a bit of a podcast fiend and a data nut. So, naturally, one of my favorite podcasts is FiveThirtyEight’s “What’s the Point”. &lt;a href=&quot;http://fivethirtyeight.com/features/dear-data-and-fivethirtyeight-want-you-to-visualize-your-podcast-habits/&quot;&gt;This week’s episode&lt;/a&gt; dug into the &lt;a href=&quot;http://www.dear-data.com/by-week/&quot;&gt;Dear Data project&lt;/a&gt; in which a pair of data visualization professionals exhanged weekly postcards with hand-drawn data renderings for a year. Much of their work centered around the activities of daily life, from laughter to indecision. Near the end of the episode, they challenged listeners to track a week’s worth of their own podcast listening habits, visualize them on a postcard, and send them in.&lt;/p&gt;

&lt;p&gt;Given my previous dabbling in quantified self efforts, I was excited to take on the challenge. And I found the limited scope and defined time period attractive. Many of my previous efforts went off the rails through a combination of the tedium of data collection coupled with distracting heaps of data to be dug into. Unsure of how I wanted to visualize the data, I decided to be detailed in my data recording efforts to ensure I had too much data, rather than too little. Below is a sample data point.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&quot;date&quot; : &quot;2016-03-14&quot;,
	&quot;startTime&quot; : &quot;18:21&quot;,
	&quot;endTime&quot; : &quot;19:45&quot;,
	&quot;podcast&quot; : &quot;Adam Carolla Show&quot;,
	&quot;device&quot; : &quot;iPhone&quot;,
	&quot;mode&quot; : &quot;Headphones&quot;,
	&quot;activity&quot; : &quot;Lifting&quot;,
	&quot;location&quot; : &quot;Gym&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some test plots to get a better feel for the data, I elected to focus on time of day, length of listening session, location while listening, and the specific podcast being played. While I typically approach visualizations focused on clarity and simplicity, this challenge (and its inspiration) begged for a more abstract/artistic approach, especially since I’d elected not to do the visualization by hand. With that in mind, I took a first pass with the following visual encodings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The x-axis is time of day, from midnight to midnight, while the y-axis represents listening locations. From bottom to top: home, local driving, gym, highway driving.&lt;/li&gt;
  &lt;li&gt;The colored shapes have uniform height, with x-axis widths spanning from start time to end time and y-position centered on location. The colored fills represent specific podcasts.&lt;/li&gt;
  &lt;li&gt;The lines connecting the dots each represent one day of the week of collected data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/blog/podcasts/podcasts-1.png&quot;&gt;&lt;img src=&quot;/assets/blog/podcasts/podcasts-1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While this first plot was interesting, it lacked clarity. One of the biggest problems was the overlapping bubbles – they became muddled and confusing due to their distorted shapes and blending colors. The lines representing days of the week also proved more distracting than useful. To address these issues, I swapped the eliptical bubbles for circles, and set each day’s line to share origin and termination points off the edge of the plot to avoid confusing them with the dot grid axes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/blog/podcasts/podcasts-2.png&quot;&gt;&lt;img src=&quot;/assets/blog/podcasts/podcasts-2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was definitely a step in the right direction, but the y-axis location encoding seemed ineffective, and, while the overlaps were good at showing clustered listening times, color blending was still obscuring podcast data. I decided it was time to swap days and location, mapping days to the y-axis to create a more traditional calendar view. With only four locations to now map to the scattered bubbles, the logical choice was to run traces from each corner, which proved remarkably effective at demonstrating additional clustering. For my sanity (and yours), I finally added labels and a legend to the graph, figuring I could just convert them into a guide graphic when ready to print the postcard.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/blog/podcasts/podcasts-3.png&quot;&gt;&lt;img src=&quot;/assets/blog/podcasts/podcasts-3.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a winner. Aside from tweaking some colors and opacities, I felt this third attempt was an elegant enough solution to run with. The date/time encoding is clear and simple, allowing readers to quickly identify time clustering patterns across days without the podcast data being obscured. And, after a few passes at mapping locations to different corners, this version was untangled enough to clearly read additional patterns.&lt;/p&gt;

&lt;p&gt;After making those tweaks, here’s how the final version (digital and printed) turned out:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/blog/podcasts/podcasts-4.png&quot;&gt;&lt;img src=&quot;/assets/blog/podcasts/podcasts-4.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/assets/blog/podcasts/podcasts-5.png&quot;&gt;&lt;img src=&quot;/assets/blog/podcasts/podcasts-5.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Will update with pictures of printed cards
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For those interested, I used &lt;a href=&quot;http://processing.org&quot;&gt;Processing&lt;/a&gt; for all of my visualization work. My code is a little long and convoluted, but &lt;a href=&quot;https://github.com/bdharva/processing/tree/master/podcasts&quot;&gt;here is the full source code&lt;/a&gt; used to generate the graphic, along with the JSON data file containing my week of podcast listening data. I was a little rusty with Processing and I’m certain I have room for improvement as a programmer, but this proved good enough for what I was trying to accomplish.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Mar 2016 00:00:00 -0400</pubDate>
        <link>http://bdharva.com/blog/2016/03/29/a-week-of-podcasts.html</link>
        <guid isPermaLink="true">http://bdharva.com/blog/2016/03/29/a-week-of-podcasts.html</guid>
        
        <category>Data Visualization</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
